static String getLocalIPv4() {
    def ips = NetworkInterface.getNetworkInterfaces()
            .findAll { it.isUp() && !it.isLoopback() && !it.isVirtual() }
            .collect {
                it.getInetAddresses()
                        .findAll { !it.isLoopbackAddress() && it instanceof Inet4Address }
                        .collect { it.toString().replace("/", "") }
                        .findAll { it.startsWith("192.168.") }
            }
            .flatten()

    return ips.size() > 0 ? ips.first() : null
}

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "androidx.navigation.safeargs.kotlin"
}

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.luizssb.adidas.confirmed"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "0.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildTypes {
        def serviceUrlHost = "http://localhost"
        def serviceUrlProduct = "$serviceUrlHost:3001/"
        def serviceUrlReview = "$serviceUrlHost:3002/"
        def serviceSecondsTimeout = "10L"

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            buildConfigField("String", "SERVICE_URL_PRODUCT", "\"$serviceUrlProduct\"")
            buildConfigField("String", "SERVICE_URL_REVIEW", "\"$serviceUrlReview\"")
            buildConfigField("Long", "SERVICE_SECONDS_TIMEOUT", serviceSecondsTimeout)
        }

        debug {
            buildConfigField("String", "SERVICE_URL_PRODUCT", "\"$serviceUrlProduct\"")
            buildConfigField("String", "SERVICE_URL_REVIEW", "\"$serviceUrlReview\"")
            buildConfigField("Long", "SERVICE_SECONDS_TIMEOUT", serviceSecondsTimeout)
        }

        def localIp = getLocalIPv4()
        if (localIp != null) {
            def localIpUrlHost = "http://localhost"
            def localIpUrlProduct = "$localIpUrlHost:3001/"
            def localIpUrlReview = "$localIpUrlHost:3002/"

            release_localIP {
                minifyEnabled false
                proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
                buildConfigField("String", "SERVICE_URL_PRODUCT", "\"$localIpUrlProduct\"")
                buildConfigField("String", "SERVICE_URL_REVIEW", "\"$localIpUrlReview\"")
                buildConfigField("Long", "SERVICE_SECONDS_TIMEOUT", serviceSecondsTimeout)
            }

            debug_localIP {
                buildConfigField("String", "SERVICE_URL_PRODUCT", "\"$localIpUrlProduct\"")
                buildConfigField("String", "SERVICE_URL_REVIEW", "\"$localIpUrlReview\"")
                buildConfigField("Long", "SERVICE_SECONDS_TIMEOUT", serviceSecondsTimeout)
            }
        }
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation "com.google.android.material:material:$versions.material"

    implementation "androidx.core:core-ktx:$versions.androidx.core"
    implementation "androidx.appcompat:appcompat:$versions.androidx.appcompat"
    implementation "androidx.constraintlayout:constraintlayout:$versions.androidx.constraintlayout"
    implementation "androidx.recyclerview:recyclerview:$versions.androidx.recyclerview"
    implementation "androidx.paging:paging-runtime-ktx:$versions.androidx.paging"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$versions.androidx.swiperefreshlayout"
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.androidx.navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.androidx.navigation"

    implementation "io.insert-koin:koin-android:$versions.koin"

    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"

    implementation "com.github.bumptech.glide:glide:$versions.glide"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    annotationProcessor "com.github.bumptech.glide:compiler:$versions.glide"

    testImplementation "junit:junit:$testVersions.junit"

    androidTestImplementation "androidx.test.ext:junit:$androidTestVersions.junit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidTestVersions.espresso"
}
